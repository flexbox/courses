---
title:    'Design system in React Native ‚ÄîFrom zero to hero'
layout:   presentation
noindex:  false
---

| ### Design system in React Native <br> ‚ÄîFrom Zero to Hero

  <br><br>

  React Meetup ‚Äî Bordeaux

  _March 2021_

  ---

  > Don‚Äôt code your CSS for the page.<br>
  > Code for the system.<br>
  > ‚ÄîJonathan Snook

  --

  ### 2007

  ![](/assets/images/react-native-restyle/art-css.png)

  --

  ### Web Developpers

  ![](/assets/images/react-native-restyle/css.gif)

  --

  ### CSS in 2010-ish

  - üòï Global scope
  - üò¨ Grid system without `flexbox`
  - üßê Web browsers engines `Gecko`, `Trident`, `Webkit`‚Ä¶

  --

  ### 2012

  ![](/assets/images/react-native-restyle/rails-sass.png)

  --

  ### CSS Preprocessing FTW

  - ‚úÖ Variables
  - ‚úÖ Nesting
  - ‚úÖ Mixins
  - üì¶ BEM
  - üì¶ SMACSS
  - üì¶ Atomic Design

  --

  ### 2015

  React and React Native

  --

  ### Styling in React

  ![](/assets/images/react-native-restyle/react-style.png)

  --

  ### React Native

  We Do `CSS-in-JS`

  --

  ### Styling in React Native

  - ‚≠ê Write `CSS` in `JavaScript` syntax (`functions` and `variables`)
  - üì¶ Colocate styles with components
  - üåó Take advantage of anything from the JS ecosystem

  --

  # Guess what happened?

  --

  ### Developpers with React Native

  ![](/assets/images/react-native-restyle/css.gif)

  ---
= partial 'layouts/presentation/speaker'
| <div></div>
  --

  ## Mentions ‚ù§Ô∏è [@flexbox_](https://twitter.com/flexbox_)

  Save the link

  http://bit.ly/rn-design

  --

  ## Today we will be covering

  üìï

  - The importance of a color palette
  - Designing Typography at scale
  - TypeScript Design System
  - Restyle from Shopify
  - Storybook from Chromatic

  --

  ## Why ?

  Become a hero‚Ä¶

  ![](/assets/images/react-native-restyle/hulk-ultron.jpg)

  --

  ### Epic fail

  ‚Ä¶not a zero

  ![](/assets/images/react-native-restyle/hulk2003.jpg)

  ---

  # Who are you?

  --

  https://www.wooclap.com/HULK

  ![](/assets/images/react-native-restyle/qr-game.png)

  --

  https://app.wooclap.com/events/HULK/0

  --

  ## React Native in a nutshell

  ![](/assets/images/react-native-restyle/bruce-banner.webp)

  --

  ## React Native in a nutshell

  ```
  .js --- üé©‚ú® ------> iOS
                  |--> Android
                  |--> Web Apps
                  |--> Windows Apps
                  |--> macOS Apps
  ```

  --

  ## React Native in a nutshell

  Container
  ```
  <div>   ---->   <View>
  ```

  Text
  ```
  <p>     ---->   <Text>
  <h1>    ---->   <Text>
  <h2>    ---->   <Text>
  <h3>    ---->   <Text>
  ```

  ---

  #¬†PHASE 1

  --

  ### React Native Vs StyleSheets

  - JavaScript objects
  - No `-` it's camelCase

  --

  ### React Native Vs StyleSheets

  ```
  import React from "react";
  import { StyleSheet, Text, View } from "react-native";

  const App = () => (
    <View style={styles.container}>
      <Text>React Native</Text>
    </View>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: "#eaeaea"
    },
  });
  ```

  --

  Strings or number ‚Äîsometimes weird `fontWeight`

  ```
  const App = () => (
    <View style={styles.container}>
      <Text style={styles.title}>React Native</Text>
    </View>
  );

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: "#eaeaea"
    },
    title: {
      marginTop: 16,
      paddingVertical: 8,
      borderWidth: 4,
      borderColor: "#20232a",
      borderRadius: 6,
      backgroundColor: "#61dafb",
      color: "#20232a",
      textAlign: "center",
      fontSize: 30,
      fontWeight: "500"
    }
  });
  ```

  --

  Shadows iOS !== Android

  ```
  const App = () => (
    <View style={styles.square}>
      <Text>Square with Shadow</Text>
    </View>
  );

  const styles = StyleSheet.create({
    square: {
      alignSelf: "center",
      backgroundColor: "white",
      height: 150,
      width: 150,
      shadowColor: "black", //iOS
    },
  });
  ```

  --

  Shadows iOS !== Android

  ```
  const App = () => (
    <View style={styles.square} elevation={3}> //Android
      <Text>Square with Shadow</Text>
    </View>
  );

  const styles = StyleSheet.create({
    square: {
      alignSelf: "center",
      backgroundColor: "white",
      height: 150,
      width: 150,
      shadowColor: "black", //iOS
    },
  });
  ```

  --

  ### Layout

  [Flexbox Yoga](https://yogalayout.com/playground)

  ![](/assets/images/react-native-restyle/yoga.png)

  --

  ### Same same ‚Äîbut different

  - `flexDirection` defaulting to `column` instead of `row`
  - `alignContent` defaulting to `flex-start` instead of `stretch`
  - `flexShrink` defaulting to `0` instead of `1`

  --

  ### Images

  Use the `@2x` and `@3x` suffixes to provide images for different screen densities.

  ```
  <Image source={require('./img/check.png')} />
  ```

  ![](/assets/images/react-native-restyle/exports.gif)


  ---

  #¬†PHASE 2

  --

  ### Designers x Developers

  ![](/assets/images/react-native-restyle/hulk-ironman.gif)

  --

  ### Find a common design language

  ![](/assets/images/react-native-restyle/prettier.png)

  --

  ## Colors

  --

  ### üò§

  ![](/assets/images/react-native-restyle/palette-not-scallable.png)

  --

  ### Anatomy of a good palette

  - https://getbootstrap.com/docs/5.0/customize/color/
  - https://tailwindcss.com/docs/customizing-colors
  - https://colors.eva.design/

  --

  ### You start with a simple file

  ```
  // colors.ts

  export const color = {
    background: '#ffffff',
    primaryLight: '#5e8c5d',
    primary: '#7daf6b',
    primaryDark: '#e0ebd7',
    red: '#ed3e44'
    grayDark: '#666',
    gray: '#b3b3b3',
    grayLight: '#b3b3b3',
    transparent: 'rgba(0, 0, 0, 0)',
  };

  ```

  --

  ### and use values in files

  ```
  // Card.tsx

  import {color} from '~/styles/colors';

  ...

  const styles = StyleSheet.create({
    container: {
      padding: 20,
      borderRadius: 5
      backgroundColor: color.primary,
    },
  });

  ```

  --

  ### Colors

  - Hard to maintain
  - What about theming
  - Should I use red for error messages?

  --

  ## Typography

  --

  ### Typography

  ```
  // typography.ts

  export const extraLargeFontSize = {fontSize: 28};
  export const largeFontSize = {fontSize: 24};
  export const buttonFontSize = {fontSize: 18};
  export const baseFontSize = {fontSize: 16};
  export const smallFontSize = {fontSize: 12};
  export const smallestFontSize = {fontSize: 10}; //tab bar font size

  export const textRegular = {fontFamily: 'DINPro-Medium'};
  ```

  --

  ```
  // OnboardingScreen.tsx

  <Text style={styles.hint}>Select your interests:</Text>

  ...

  const styles = StyleSheet.create({
    hint: {
      size: typography.baseFontSize,
      color: color.grayDark,
    },
  });
  ```

  --

  ### `...` Spread operator

  ```
  // typography.ts

  export const bodyText = {
    ...textRegular,
    ...smallFontSize,
    color: color.grayDark,
    lineHeight: 19,
  };

  export const headerText = {
    ...textHeader,
    color: color.black,
  };
  ```
  --

  ### Create more rules for less styles

  ```
  // ArticleScreen.tsx

  <Text style={styles.header}>Article</Text>

  ...

  const styles = StyleSheet.create({
    header: {
      ...Typography.headerText,
      color: color.primary,
    },
  });
  ```
  --

  ### Can you add just a tiny small change?

  _Designer request on friday 5pm_

  ![](/assets/images/react-native-restyle/tony-car.jpg)

  --

  ### Create more and more rules for less and less styles

  ```
  // HistoryScreen.tsx

  <Text style={[styles.header, styles.textCenter]}>History</Text>

  ...

  const styles = StyleSheet.create({
    header: {
      ...Typography.headerText,
      color: color.primary,
    },
    textCenter: {
      textAlign: 'center',
    }
  });
  ```

  --

  ### üò± `n` levels of abstraction

  ![](/assets/images/react-native-restyle/inception-nolan.jpg)

  --

  ### üò± `n` levels of abstraction

  ![](/assets/images/react-native-restyle/bug-layout.gif)

  --

  ### Typography recipe to disaster

  - Too much duplication
  - Create more rules for less style
  - Font styles doesn't make any sense

  --

  ### Spacing and `ScrollView`

  ![](/assets/images/react-native-restyle/github-list.png)

  --

  ## CEO wants dark mode

  _Too complicated, because you have sh$t tons of issues_

  ![](/assets/images/react-native-restyle/hulk-thor.gif)

  --

  <iframe src="https://www.youtube.com/embed/QiXJtjNea1A?modestbranding=1&showinfo=0&rel=0&iv_load_policy=3&theme=light&fs=0&color=white&controls=0&disablekb=1" width="760" height="515"  frameborder="0"></iframe>

  ---

  #¬†PHASE 3

  --

  Let's reboot your paradigm

  ![](/assets/images/react-native-restyle/hulk-fingers.gif)

  --

  `yarn add @shopify/restyle`

  [![](/assets/images/react-native-restyle/restyle.png)](https://github.com/Shopify/restyle)

  --

  > The Restyle library provides <br>
  > a __type-enforced system__ for __building UI components__ <br>
  > in `React Native` with `TypeScript`.

  --

  ### Why TypeScript?

  --

  ### TypeScript in a nutshell

  ![](/assets/images/react-native-restyle/spirderman-js-ts.png)

  --

  Avoid cognitive overload

  ![](/assets/images/react-native-restyle/overload.gif)

  --

  ### DX is nice

  - Types
  - Autocomplete
  - It's just a superset of JavaScript

  --

  ### Add a `ThemeProvider`

  ```
  // App.tsx

  import { ThemeProvider } from '@shopify/restyle';
  import theme from '~/theme';

  const App = () => (
    <ThemeProvider theme={theme}>
      <RootNavigator />
    </ThemeProvider>
  );
  ```

  --

  ## COLORS

  --

  ###¬†Color palette that sparks joy

  ```
  // palette.ts

  const palette = {
    purple100: '#8C6FF7',
    purple500: '#5A31F4',
    purple900: '#3F22AB',

    green100: '#56DCBA',
    green500: '#0ECD9D',
    green900: '#0A906E',

    black: '#0B0B0B',
    white: '#F0F2F3',
  };
  ```

  --

  ###¬†Create a theme using this palette

  ```
  // theme.ts

  import { createTheme } from '@shopify/restyle'
  import { palette } from './palette';

  const theme = createTheme({
    colors: {
      mainBackground: palette.white,
      primary: palette.green500,
      secondary: palette.purple500,
      text: palette.black,
      textOnDark: palette.white,
      icon: palette.gray800,
      iconOnDark: palette.gray200,
    },
  });

  export type Theme = typeof theme;
  export default theme;
  ```

  --

  ### Using colors

  ![](/assets/images/react-native-restyle/wix-calendar.gif)

  --

  ### useTheme()

  ```
  import React from 'react';
  import {Calendar as WixCalendar, CalendarProps} from 'react-native-calendars';

  import {Theme} from '~/theme/theme';
  import {useTheme} from '@shopify/restyle';

  const Calendar = (props: CalendarProps) => {
    const theme = useTheme<Theme>();

    return (
      <WixCalendar
        {...props}
        theme={{
          textSectionTitleColor: theme.colors.gray400,
          selectedDayBackgroundColor: theme.colors.primaryLight,
          selectedDayTextColor: theme.colors.primaryDark,
          todayTextColor: theme.colors.primary,
          dayTextColor: theme.colors.gray800,
          textDisabledColor: theme.colors.gray200,
          arrowColor: theme.colors.gray500,
          monthTextColor: theme.colors.black,
        }}
      />
    );
  };

  export default Calendar;

  ```

  --

  ### üé® `backgroundColor` | `color` everywhere

  ![](/assets/images/react-native-restyle/backgroundColor.gif)

  --

  # TYPOGRAPHY

  --

  ### textVariants

  ```
  // theme.ts

  const theme = createTheme({

    ...

    textVariants: {
      h1: {
        fontSize: 28,
        fontWeight: '500',
        fontFamily: 'DINPro-Medium',
      },
      h2: {
        fontSize: 24,
        fontWeight: '500',
        fontFamily: 'DINPro-Medium',
      },
      p1: {
        fontSize: 16,
        lineHeight: 24,
        fontFamily: 'DINPro-Regular',
      },
      p2: {
        fontWeight: '500',
        fontSize: 16,
        lineHeight: 24,
        fontFamily: 'DINPro-Medium',
      },
      s1: {
        fontSize: 12,
        fontFamily: 'DINPro-Medium',
      },
    },
  });

  ```

  --

  ## `<Text>`

  ```
  // Text.tsx

  import {createText} from '@shopify/restyle';
  import {Theme} from './theme';

  const Text = createText<Theme>();

  export default Text;

  ```

  --

  ## Predefined `<Text>` Component

  - `color`
  - `opacity`
  - `visible`
  - `typography`
  - `textShadow`
  - `spacing`

  --

  ### Variant

  ![](/assets/images/react-native-restyle/text-variant.gif)

  --

  # Spacing

  --

  ### T-shirt sizing

  ```
  // theme.ts

  const theme = createTheme({
    ...

    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    }
  },

  ```

  --

  ## `<Box>`

  ```
  // Box.tsx

  import {createBox} from '@shopify/restyle';
  import {Theme} from '~/theme';

  const Box = createBox<Theme>();

  export default Box;

  ```

  --

  ## Predefined `<Box>` Component

  - `backgroundColor`
  - `opacity`
  - `visible`
  - `layout`
  - `spacing`: padding, margin
  - `border`: `borderRadii`
  - `shadow`
  - `position`

  --

  ## `<Box>` Autocomplete

  ![](/assets/images/react-native-restyle/box-alignment.gif)

  --

  ## Custom Components

  --

  ### Card

  ```
  // Card.tsx

  import {
    createRestyleComponent,
    createVariant,
    spacing,
    SpacingProps,
    VariantProps
  } from '@shopify/restyle';
  import {Theme} from '~/theme';

  type Props = SpacingProps<Theme> & VariantProps<Theme, 'cardVariants'>
  const Card = createRestyleComponent<Props>([
    spacing,
    createVariant({themeKey: 'cardVariants'})
  ])

  export default Card

  ```

  --

  ### Card

  ![](/assets/images/react-native-restyle/cardVariants.gif)

  --

  ### `cardVariants`

  ```
  // theme.ts

  const theme = createTheme({

    ...

    cardVariants: {
      callout: {
        backgroundColor: palette.cardBackground,
        borderRadius: 4
      },
      outline: {
        borderColor: palette.cardBorder,
        borderWidth: 2,
        backgroundColor: palette.transparent,
        borderRadius: 4
      },
    },
  });

  ```

  --

  ## Dark Mode

  --

  ### Dark Mode

  ```
  // theme.ts

  ...

  const darkTheme: Theme = {
    ...theme,
    colors: {
      ...theme.colors,
      mainBackground: palette.black,
      mainForeground: palette.white,

      primary: palette.green500,
      secondary: palette.purple500,

      text: palette.white,
      textOnDark: palette.black,
      icon: palette.gray200,
      iconOnDark: palette.gray800,
    },
  };
  ```

  --

  ### Dark Mode

  ```javascript
  const App = () => {
    const [darkMode, setDarkMode] = useState(false);
    return (
      <ThemeProvider theme={darkMode ? darkTheme : theme}>
        ...

        <Box marginTop="m">
          <Switch
            value={darkMode}
            onValueChange={(value: boolean) => setDarkMode(value)}
          />
        </Box>

      </ThemeProvider>
    );
  };

  export default App;
  ```

  --

  ### Appearance

  ```
  import { Appearance } from 'react-native';

  ...

  const colorScheme = Appearance.getColorScheme();

  if (colorScheme === 'dark') {
    // Use dark color scheme
    setDarkMode(true)
  }
  `

  --

  > Why does it take so long to build software?<br>
  > ‚Äî Marketing people who "just want to add a button"

  ![](/assets/images/react-native-restyle/why-so-long.jpg)

  --

  ### User flow is complex

  ![](/assets/images/react-native-restyle/ux-mobile.jpg)

  --

  ### Component Driven Development

  2017

  ![](/assets/images/react-native-restyle/CDD.jpg)

  --

  > Designing your software applications by building __loosely-coupled independent components__

  --

  ### Storybook

  --

  ### Storybook

  ![](/assets/images/react-native-restyle/storybook-intro.gif)

  --

  ### Storybook

  https://airbnb.io/lunar/

  --

  ### Storybook

  - `npx -p @storybook/cli sb init --type react_native`
  - `yarn add -D @types/storybook__react`

  --

  ### Storybook

  ```
  // App.tsx

  import {ThemeProvider} from '@shopify/restyle';
  import {ToggleStorybook} from '~/storybook/ToggleStorybook';

  import theme from '~/theme';

  const App = () => (
    <ToggleStorybook>
      <ThemeProvider theme={theme}>
        <RootNavigator />
      </ThemeProvider>
    </ToggleStorybook>
  );
  ```

  --

  ### Storybook

  ```
  // ToggleStorybook.tsx

  import React, {useState, useEffect} from 'react';

  import config from '~/config';

  /**
   * Toggle Storybook mode, in __DEV__ mode only.
   *
   * In non-__DEV__ mode, or when Storybook isn't toggled on,
   * renders its children.
   *
   */

  interface ToggleStorybookProps {
    children: React.ReactElement;
  }

  export function ToggleStorybook(props: ToggleStorybookProps) {
    const [StorybookUIRoot, setStorybookUIRoot] = useState(null);

    useEffect(() => {
      if (__DEV__) {
        // Load the storybook UI once
        setStorybookUIRoot(() => require('./Storybook').StorybookUIRoot);
      }
    }, []);

    if (config.SHOW_STORYBOOK === 'true') {
      return StorybookUIRoot ? <StorybookUIRoot /> : null;
    } else {
      return props.children;
    }
  }

  ```

  --

  ### dotenv

  ```
  // .env

  SHOW_STORYBOOK=false

  ```

  --

  ![](/assets/images/react-native-restyle/react-native-storybook.gif)

  --

  ### `debugger;`

  ![](/assets/images/react-native-restyle/storybook-copy-object.gif)

  ---

  # RECAP

  --

  ### Tooling from the Hero

  - ‚úÖ Use `TypeScript`
  - ‚úÖ `restyle` is awesome
  - ‚úÖ `StoryBook` to work faster at scale

  --

  ### Assemble UI like a Hero

  ![](/assets/images/react-native-restyle/avengers-assemble.gif)

  --

  > Don‚Äôt code your `CSS-in-JS` for the screen.<br>
  > Code for the system.<br>
  > ‚ÄîDavid Leuliette

  --

  [https://davidl.fr/road-to-react-native](https://davidl.fr/road-to-react-native)

  ![](/assets/images/react-native-restyle/road-to-react-native.jpg)

  --

  ## Q&A [@flexbox_](https://twitter.com/flexbox_)

  ü§ñ

  https://davidl.fr/road-to-react-native
